{"version":3,"sources":["components/DirectoryFolder/DirectoryFolder.tsx","components/DirectoryTree/DirectoryTree.tsx","consts.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DirectryFolder","folderTree","renderDirectoryTree","selectedId","setSelectedId","useState","isOpen","setOpen","isSelectedFolder","id","onClick","style","cursor","color","fontWeight","children","renderArrow","name","map","item","marginLeft","DirectoryTree","setFolderTree","errorFolderTree","setErrorFolderTree","useEffect","fetch","then","response","json","data","catch","error","getBreadcrumbsPath","folder","i","length","path","unshift","margin","renderBreadcrumbs","marginTop","DirectoryFolder","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LA+CeA,EApCQ,SAAC,GAA2E,IAAzEC,EAAwE,EAAxEA,WAAYC,EAA4D,EAA5DA,oBAAqBC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,cACrE,EAA0BC,mBAASJ,EAAWK,QAA9C,mBAAOA,EAAP,KAAeC,EAAf,KAEMC,EAAmBP,EAAWQ,KAAON,EAa3C,OACE,qCACE,sBACEO,QARc,WAClBH,GAASD,GACTF,EAAcH,EAAWQ,KAOrBE,MAAO,CAAEC,OAAQ,UAAWC,MAAOL,EAAmB,UAAY,UAAWM,WAAYN,EAAmB,OAAS,UAFvH,UAbgB,WAClB,GAAIP,EAAWc,SACb,OAAOT,EAAS,SAAW,SAexBU,GAAef,EAAWgB,QAE5BX,GAAUL,EAAWc,UAAYd,EAAWc,SAASG,KAAI,SAACC,GAAD,OACxD,qBAEER,MAAO,CAAES,WAAY,QAFvB,SAIGlB,EAAoBiB,IAHhBA,EAAKV,WC2BLY,EA1DO,WACpB,MAAoChB,qBAApC,mBAAOJ,EAAP,KAAmBqB,EAAnB,KACA,EAA8CjB,qBAA9C,mBAAOkB,EAAP,KAAwBC,EAAxB,KACA,EAAoCnB,mBAAS,KAA7C,mBAAOF,EAAP,KAAmBC,EAAnB,KAEAqB,qBAAU,WACRC,MCX6B,gEDY1BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAcQ,MAEfC,OAAM,SAACC,GACNR,EAAmBQ,QAEtB,IAEH,IAAMC,EAAqB,SAArBA,EAAsBC,EAAgBzB,GAC1C,GAAIyB,EAAOzB,KAAOA,EAChB,MAAO,GACF,GAAIyB,EAAOnB,SAChB,IAAK,IAAIoB,EAAI,EAAGA,EAAID,EAAOnB,SAASqB,OAAQD,IAAK,CAC/C,IAAIE,EAAOJ,EAAmBC,EAAOnB,SAASoB,GAAI1B,GAClD,GAAa,OAAT4B,EAEF,OADAA,EAAKC,QAAQJ,EAAOnB,SAASoB,GAAGlB,MACzBoB,EAIb,OAAO,MAgBT,OACE,8BACGpC,EACC,sBAAKU,MAAO,CAAE4B,OAAQ,QAAtB,UACE,qBAAK5B,MAAO,CAAEE,MAAO,UAAWC,WAAY,QAA5C,SAjBkB,SAACb,GAAD,aACxB,sDACYgC,EAAmBhC,EAAYE,UAD3C,aACY,EAA4Ce,KAAI,SAACC,GAAD,mBAAgBA,SAefqB,CAAkBvC,KACzE,qBAAKU,MAAO,CAAE8B,UAAW,QAAzB,SAboB,SAAtBvC,EAAuBD,GAAD,OAC1B,cAACyC,EAAD,CACEzC,WAAYA,EACZC,oBAAqBA,EACrBC,WAAYA,EACZC,cAAeA,IAQyBF,CAAoBD,QAG1DsB,EAAkB,8BAAMA,IAAyB,6DElD1CoB,MANf,WACE,OACE,cAAC,EAAD,KCUWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7a038637.chunk.js","sourcesContent":["import React, { useState } from \"react\"\n\nimport { Folder } from \"../../types\"\n\ninterface Props {\n  folderTree: Folder;\n  renderDirectoryTree: (val: Folder) => React.ReactNode\n  selectedId: string\n  setSelectedId: (val: string) => void\n}\n\nconst DirectryFolder = ({ folderTree, renderDirectoryTree, selectedId, setSelectedId }: Props) => {\n  const [isOpen, setOpen] = useState(folderTree.isOpen)\n\n  const isSelectedFolder = folderTree.id === selectedId\n\n  const renderArrow = () => {\n    if (folderTree.children) {\n      return isOpen ? '\\u25BC' : '\\u25B6'\n    }\n  }\n\n  const handleClick = () => {\n    setOpen(!isOpen)\n    setSelectedId(folderTree.id)\n  }\n\n  return (\n    <>\n      <div\n        onClick={handleClick}\n        style={{ cursor: 'pointer', color: isSelectedFolder ? '#606060' : '#808080', fontWeight: isSelectedFolder ? 'bold' : 'normal' }}\n      >\n        {renderArrow()}{folderTree.name}\n      </div>\n      {isOpen && folderTree.children && folderTree.children.map((item) => (\n        <div\n          key={item.id}\n          style={{ marginLeft: '10px' }}\n        >\n          {renderDirectoryTree(item)}\n        </div>\n      ))}\n    </>\n  )\n}\n\nexport default DirectryFolder","import React, { useEffect, useState } from \"react\"\n\nimport DirectoryFolder from \"../DirectoryFolder\"\nimport { MOCKY_FOLDER_TREE } from \"../../consts\"\nimport { Folder } from \"../../types\"\n\nconst DirectoryTree = () => {\n  const [folderTree, setFolderTree] = useState()\n  const [errorFolderTree, setErrorFolderTree] = useState()\n  const [selectedId, setSelectedId] = useState('1')\n\n  useEffect(() => {\n    fetch(MOCKY_FOLDER_TREE)\n      .then(response => response.json())\n      .then(data => {\n        setFolderTree(data)\n      })\n      .catch((error) => {\n        setErrorFolderTree(error)\n      })\n  }, [])\n\n  const getBreadcrumbsPath = (folder: Folder, id: string): Array<string> | null => {\n    if (folder.id === id) {\n      return []\n    } else if (folder.children) {\n      for (var i = 0; i < folder.children.length; i++) {\n        var path = getBreadcrumbsPath(folder.children[i], id)\n        if (path !== null) {\n          path.unshift(folder.children[i].name)\n          return path\n        }\n      }\n    }\n    return null\n  }\n\n  const renderBreadcrumbs = (folderTree: Folder) =>\n    <div>\n      Documents{getBreadcrumbsPath(folderTree, selectedId)?.map((item) => ` > ${item}`)}\n    </div>\n\n  const renderDirectoryTree = (folderTree: Folder): React.ReactNode =>\n    <DirectoryFolder\n      folderTree={folderTree}\n      renderDirectoryTree={renderDirectoryTree}\n      selectedId={selectedId}\n      setSelectedId={setSelectedId}\n    />\n\n  return (\n    <div>\n      {folderTree ? (\n        <div style={{ margin: '20px' }}>\n          <div style={{ color: '#606060', fontWeight: 'bold' }}>{renderBreadcrumbs(folderTree)}</div>\n          <div style={{ marginTop: '20px' }}>{renderDirectoryTree(folderTree)}</div>\n        </div>\n      ) : (\n        errorFolderTree ? <div>{errorFolderTree}</div> : <div>Fetching dolder tree...</div>\n      )}\n    </div>\n  )\n}\n\nexport default DirectoryTree\n","// API\nexport const MOCKY_FOLDER_TREE = 'https://run.mocky.io/v3/f59e0fc8-6744-4060-adc1-75141a045321'\n\n// DEFAULT DATA\nexport const folderTree = {\n  id: '1',\n  name: 'Documents',\n  isOpen: true,\n  children: [\n    {\n      id: '2',\n      name: 'Folder 1',\n      isOpen: true,\n      children: [\n        {\n          id: '3',\n          name: 'Subfolder 1A',\n          isOpen: true,\n        },\n        {\n          id: '4',\n          name: 'Subfolder 1B',\n          isOpen: true,\n          children: [\n            {\n              id: '5',\n              name: 'Subfolder 1B-1',\n              isOpen: true,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: '6',\n      name: 'Folder 2',\n      isOpen: true,\n      children: [\n        {\n          id: '7',\n          name: 'Subfolder 2A',\n          isOpen: true,\n        },\n        {\n          id: '8',\n          name: 'Subfolder 2B',\n          isOpen: true,\n        },\n        {\n          id: '9',\n          name: 'Subfolder 2C',\n          isOpen: true,\n        },\n      ],\n    },\n    {\n      id: '10',\n      name: 'Folder 3',\n      isOpen: true,\n    },\n  ],\n}","import DirectoryTree from './components/DirectoryTree'\n\nfunction App() {\n  return (\n    <DirectoryTree />\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}